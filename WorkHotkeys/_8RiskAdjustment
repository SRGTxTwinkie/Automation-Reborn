import pyautogui
import pyperclip
import threading
from keyboard import *
from _99helperFunctions import *
from _99universalFunctions import *
from _99settingsFile import *


#Init
activateWindow("facets")

#External Settings
settings        = SettingsFile("_0settingsRep.txt")
amountOfClaims  = settings.readValue("amountOfClaims" , int)
incrementNext   = settings.readValue("incrementNext"  , bool)
replaceOriginal = settings.changeValue("replaceOriginal", "True", True, bool)

#Internal Settings
currentDate = ""
old_data    = ""
claimNumber = ""
currentSearch = "Subscriber ID"
lastCommand = None
isFacility = None
pauseAfter = False

#Functions
def parseFacilityLoc():
    global isFacility
    isFacilityLoc = None
    while True:
        isFacility = parseFacility()
        if isFacility == None:
            isFacility = isFacilityLoc
            continue

        isFacilityLoc = isFacility

def openClaimLoc(hotkey="f13", reprocess=False, click=ClickOptions.Default, f3=True, suffix=1, moveToWindow=True, highlight=True, checkReplacement=False): 
    global pauseAfter
    openClaim(hotkey, reprocess, click, f3, suffix, moveToWindow, highlight)
    waitForAdj()

    if checkReplacement:
        if not isFacility:
            pressKeyList([
                "ctrl+up",
                "tab,1",
                "shift+tab,7",
                "space"
            ])
        else:
            pressKeyList([
                "ctrl+up"
            ])
        
        print("Shift to go back...")
        catch("shift", hard=True)

        pressKeyList([
            "tab",
            "down",
            "enter",
            "ctrl+down"
        ])
    
    pauseAfter = False


def switcher(toSwitch):
    global incrementNext, replaceOriginal

    if toSwitch == "incrementNext":
        incrementNext = settings.changeValue("incrementNext", not incrementNext, True, bool)
        os.system("cls")
        print("incrementNext: {}".format(incrementNext))
    elif toSwitch == "replaceOriginal":
        replaceOriginal = settings.changeValue("replaceOriginal", not replaceOriginal, True, bool)
        os.system("cls")
        print("replaceOriginal: {}".format(replaceOriginal))

def overRidePCALoc(arg2, arg3):
    global isFacility

    overRidePCA(arg2, arg3)

def incrementClaim(operator="+", getNewClaim=None):
    global claimNumber, amountOfClaims, pauseAfter
    
    if operator == "+":
        amountOfClaims = settings.changeValue("amountOfClaims", str(amountOfClaims + 1), True, int)
    elif operator == "-":
        amountOfClaims = settings.changeValue("amountOfClaims", str(amountOfClaims - 1), True, int)
    elif operator == "=":
        amountOfClaims = settings.changeValue("amountOfClaims", "0", True, int)
    else:
        raise ArgumentError("Unknown passed")
    
    os.system("cls")

    if amountOfClaims != CLAIM_AMOUNT:
        print("Amount of Claims:", amountOfClaims)
        print("Amount Left:", CLAIM_AMOUNT - amountOfClaims)
        print("Percentage Done:", str(round((amountOfClaims / CLAIM_AMOUNT) * 100, 2)) + "%")
        time =  round(amountOfClaims / 23, 2)
        hours = int(time)
        minutes = int((time * 60) % 60)
        print(f"Time Completed: {hours}:{minutes}")
    else:
        activateWindow("code")
        print("{} Claims reached".format(CLAIM_AMOUNT))
        input("Press enter to continue")
        activateWindow("facets")
    
    if getNewClaim:
        openClaimLoc(openClaimArgs["hotkey"],
                     openClaimArgs["reprocess"],
                     openClaimArgs["click"],
                     openClaimArgs["f3"],
                     openClaimArgs["suffix"],
                     openClaimArgs["moveToWindow"],
                     openClaimArgs["highlight"],
                     openClaimArgs["checkReplacement"])
        pauseAfter = False

def overRideIt():
    pressKeyList([
        "alt+o",
        "-3,assertTopWindow,Line Item Override",
        "tab,15,0",
        "space",
        "tab",
        "-1,O33",
        "tab",
        "enter",
        "f3"
    ])



clickTypesArr = [ClickOptions.BiLaunch, ClickOptions.Excel, ClickOptions.Default]
openClaimArgs = {
    "hotkey" : "f13",
    "reprocess" : False,
    "click" : clickTypesArr[settings.readValue("click", int)],
    "f3" : True,
    "suffix" : 1,
    "moveToWindow" : True,
    "highlight" : False,
    "checkReplacement" : False
}

CLAIM_AMOUNT = settings.readMath("totalClaims")

threading.Thread(target=parseFacilityLoc, name="FacilityParse", daemon=True).start()

Hotkey("alt+1", openClaimLoc, openClaimArgs)
Hotkey("alt+2", overRideIt)



add_hotkey("f4", incrementClaim)
add_hotkey("=", incrementClaim)
add_hotkey("-", incrementClaim, ("-",))
add_hotkey("shift+ctrl+=", incrementClaim, ("=",))
print("Loaded")
wait()